ChangeLog
---------
12.12.2011
enabled comparison of parameters of different mutability (but same type)
- modified == operator (in API headers)
- updated parameter implementations

01.12.2011
small broker implementation change to provide compatibility for example #16

14.11.2011
cci_value support for SystemC data types
- added full support for SystemC parameter cci_values and string vector parameters
- updated example and guidelines.txt

31.10.2011
cci_value support for standard cci_param data types
- added cci_value_helper template class for cci_value support
- added dev_example/cci_value_example

19.10.2011
track initial value originators
- added broker function get_latest_write_originator to interface
- implemented in broker and private broker

23.09.2011
persistent access to latest value originator 
- API: added cci_base_param::get_latest_write_originator()
- updated README
- POC imp: added get_latest_write_originator()
- added observer-demonstration to dev_examples/gs_example
  using global get observer API as well as new parameter observer API

22.09.2011
added is_initial_value feature
- added is_initial_value support to prototype
- is_initial_value now const
- added dev_example/is_initial_value_example

20.09.2011
- slightly changed callback function in broker if: cci_cnf_broker_if::register_str_callback and cci_cnf_broker_if::register_callback which was not complete yet
- added some callback abilities to prototype in gs_cci_cnf_broker
- added dev_example/callback_example

06.09.2011
several small changes to callbacks:
- renamed internal callb_adapt_b -> callb_adapt
- added new callback function type with param name: param_callback_func_ptr
- for consistency renamed callback_func_ptr -> param_callback_func_ptr



01.09.2011
- removed totally outdated dev_example priv_broker_example_dl
- changed gs private broker's constructor: does not need originator which is created automatically from owner now

26.07.2011
- Changed error reporting

20.07.2011
- Changed private broker
  Automatic push and pop is done by cci_broker_manager
  Important: Semantic of cci_broker_manager did change!
- removed broker registry
- Some copy constructors private
- clean-up of some explicit constructors

24.03.2011
- BUG - STILL TODO: PRIVATE BROKER STACK POP!
  Currently the pop from broker stack needs to be done manually,
  cp. testbenches in dev_examples/priv_broker_example*
- changed way how to access broker accessors
- important API change:
  instead of cci::cnf::get_cnf_broker_instance(originator)->
  use now cci::cnf::cci_broker_manager::get_current_broker(originator).
- search_for_broker renamed to get_current_broker
- smaller API changes:
  gs_cci_private_broker_accessor now get a reference to the owner (not a pointer)
  gs_cci_private_broker now gets a name
  parameter constructor new options (e.g. broker without bool top-level-name)
- top-level-names in cci_param constructors not with bool but with cci::cnf::CCI_TOP_LEVEL_NAME
  (to avoid ambiguous constructors)

23.02.2011
- reverted some originator changes: Originator information now hold within global pointer
- added originator data type combining sc_object and name information
- eased originator handling
- changed syntax for get_cnf_broker_instance:
  use cci::cnf::get_cnf_broker_instance(cci::cnf::cci_originator(*this));
  intead of cci::cnf::get_cnf_broker_instance(this);
- bugfix reported by Swami in gs_cci_base_param::is_invalid_value

01.02.2011
- detach cci_param_(base_)impl_if from cci_(base_)param
- added originator function parameters to cci_param_(base_)impl_if and example implementation
  (still TODO for most functions)
- modified cci_(base_)param so that they now can create a copy of themselved, with storing originator information, to act as parameter accessors
- changed broker interface (rules) and implementation to use param accessors
TODO: Tests + further functions in cci_param_(base_)impl_if and implementation

15.12.2010
- Added to broker implementation:
  - broker accessors:
    originator information is transfered over internal GreenControl
    infratructure thus it can be logged.
  - still TODO: parameter accessors

10.11.2010
- API modification:
  changed originator information in global get_cnf_broker_instance function:
  - Changed sc_module to sc_object
  - Added function getting string
  - Added end-user rules
  - not yet implemented 

21.10.2010
- library cleanup, new rules
- gs_example_diff_impl updated

19.10.2010
- big clean-up
- libraries (param and broker implementations) are now really independent
- examples clean-up
- param implementation library prepared to contain symbols for the provided functions

earlier:

- moved pre_write to reject_write callbacks and
  added pre_write callbacks

- hotfixed callback deletion issue
- fixed warnings and modified gs param implementation constructors
- modified internal cci report class

- added broker function get_json_string_keep_unused

- added get_default_value to cci_param interface
- added cci_param constructors (eliminating optional function parameters)
- underlying gs_param:
  - added default value
  - added is_used status (and get not impacting that status)
  - added internal init value locked check

- moved license to own file (not changed the license)
- added hierarchical precendence support by 
- adding lock to initial values

- added cci_param constructor with implementation pointer
- changed global static factory function names and namespaces
- changed broker.add_param to be called by cci_header class
- added optional broker parameter to param constructors
- separated header from implementation into different files
- introduced new path substructure in api path
- introduced cci::cnf namespace
- changed cci.h to be main include file and
- made cci_config.h the config part include file
- renamed cci_broker_module into cci_broker_manager and added convenience cci_broker_manager_module (deriving from sc_module)
- renamed cnf_api to cnf_broker

**** CCI-1.31-cci_api-160310.tar.gz ****

- Pimpl idiom / Opaque Pointer concept for params
- removed boost version dependency of implementation
- replaced boost int64 with SystemC int64
- replaced boost shared_ptr and function 
- private Broker API and example


**** CCI-1.3-cci_api-240210.tar.gz ****

- changed param hierarchy to be defined by the document and directly implemented thus being used directly by user (without pure virtual interface) (interfaces are just for compile checks)
- added is_invalid implementation, also for uninitialized params
- added locked status and checks to gs implementation
- added is_used dummy to gs implementation
- changed is_used semantic: also true if there WAS an object mapped to the NVP

**** CCI-1.21-cci_api-130110.tar.gz ****

- added syncronize API to base param
- added lock API to base params
- added mutable template types to POs
- added is_used for detecting unconsumed parameters
- added is/set_invalid_value, is_initial_value, is_default_value


**** CCI-1.2-101109.tar.gz ****

- error/warning/info throwing using sc_report mechanism
- added functions for status fields/value origin (is_default_value, is_initial_value, is_invalid_value, set_invalid_value to base param
- added functions set/get_documentation for meta data to base param
- cci_value parameter value representation
- added real number to basic data types
- cci_base_param are objects that can be instantiated.
- renamed cci_param_base to cci_base_param, because it will change from a base class to a param object
- added return type to callbacks (e.g. to support value rejection on pre write callback)
- Changed callback type from function pointer to boost::function.


**** CCI-1.1-280509.tar.gz ****

- Added callback type (reason) to callback function signature
- Error codes as return value instead of bool
- Made basic parameter types JSON independent (just renaming)
  to avoid confusion (JSON not necessary here, only needed for 
  (de)serialize).
- Added notes.txt file.
- Portability: changed long long to sc_dt::uint64


**** CCI-1.0-180509.tar.gz ****

- initial release

