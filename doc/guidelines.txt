Guidelines to be required in the standard

----------------------------------------------------------------
JSON STUFF

Uninitialized and invalid:
 Representation for param status uninitialized and invalid: 
 JSON value: null (not the string "null")

sc_time:
 Represenatation for sc_time values:
 as a JSON string: "10 SC_NS"
 The string shall begin with a JSON double number string followed
 by a space and followed by an sc_time_unit string represenation 
 ("SC_FS", "SC_PS", "SC_NS", "SC_US", "SC_MS", "SC_SEC"). 
 The sc_time_unit string shall be not case sensitiv.

----------------------------------------------------------------

TOOL ACCESS IN USER CODE

The library implementing the CCI configuration must provide the 
following function, which may work in the static code before 
sc_main is executed. It shall be available no later than the 
start of elaboration (e.g. sc_main).
It is forward declared in cci.h

 cci_cnf_broker* get_cnf_broker_instance(sc_core::sc_module* mod = NULL);

Code for tool vendor:

namespace cci {
  /**
   * @param mod  (Optional:) The sc module that wants an API
   * @return     Pointer to a configuration API
   */
  cci_cnf_broker* get_cnf_broker_instance(sc_core::sc_module* mod);
} // end namespace cci


----------------------------------------------------------------

REJECT_WRITE CALLBACK 
and
PRE_WRITE CALLBACK

Any reject_write callback is allowed to reject the value (by returning
the according enum item). Thus each observer getting such a callback must
not rely on the given value to appear as the new one - use pre_write instead!

If the value change is rejected (during reject_write), there will be no 
pre_write and no post_write callbacks for this change. If a reject_write
callback rejects the value, all remaining reject_write callbacks shall
still be called.

A pre_write callback must not reject the value write.


----------------------------------------------------------------

CALLBACK ORDER

The callback order must match the registration order. This allows the 
tool to register all desired callbacks prior to all others, because it 
gets the add_param() call at parameter construction.

Note:
This also allows to lock a parameter just on its creation on the highest
hierarchical level, to allow OVM-like precedence (because the highest 
level is able to register for new param callbacks before the lower ones).
(This is true for all callbacks being registered with the same broker,
which is usually the case, private brokers hide private params anyway.)


----------------------------------------------------------------

CALLBACK RETURN STATUS

The parameter implementation shall evaluate the enum returned by callback
functions and perform the according action (e.g. reject a value and throw
a set_param_failed exception).


----------------------------------------------------------------

STRING REPRESENTATION

Parameter string representations are JSON-conform (see http://www.json.org/)
Examples:
 Numbers:
  42
  42.3333
  -42.23e+12
 Strings:
  "Any unicode character but some specials like \" \\ \/"
 bool:
  true
  false
 Objects:
  {"any string":{"any object":42,"another member":43}}


----------------------------------------------------------------

HEADER FILES

OSCI header files are provided by the include file cci.h

Parameter headers shall be provided by the (parameter) vendor (e.g. OSCI) in 
the include file cci_params.h

API headers shall be provided by the (API) vendor in the include file
cci_api.h

----------------------------------------------------------------

PARAMETER CONSTRUCTORS

For parameters, a parameter vendor shall provide the constructors
listed in cci_param_if.h


----------------------------------------------------------------

ERROR/WARNING/INFO THROWING

The implementation shall throw sc_reports to report problems (warning/error)
or status (info). The id prefix should be (TODO:) "/OSCI/CCI/" followed by
one of the types defined in cci_error_types.h.


----------------------------------------------------------------

christian.schroeder@greensocs.com
