Requirements for the standard

----------------------------------------------------------------

TOOL ACCESS IN USER CODE

The library implementing the CCI configuration must provide the 
following function, which must work in the static code before 
sc_main is executed. It is forward declared in cci.h

 cci_cnf_api* get_cnf_api_instance(sc_core::sc_module* mod = NULL);

Code for tool:

namespace cci {
  /**
   * @param mod  (Optional:) The sc module that wants an API
   * @return     Pointer to a configuration API
   */
  cci_cnf_api* get_cnf_api_instance(sc_core::sc_module* mod);
} // end namespace cci


----------------------------------------------------------------

PRE_WRITE CALLBACK

It is possible that any pre_write callback rejects the value (by returning
the according enum item). Thus each observer getting such a callback must
not rely on the given value to appear as the new one!

If the value change is rejected during pre_write, there will be no 
post_write callback for this change.


----------------------------------------------------------------

CALLBACK ORDER

The callback order must match the registration order. This allows the 
tool to register all desired callbacks prior to all others, because it 
gets the add_param() call at parameter construction.


----------------------------------------------------------------

CALLBACK RETURN STATUS

The parameter implementation shall evaluate the enum returned by callback
functions and perform the according action (e.g. reject a value).


----------------------------------------------------------------

STRING REPRESENTATION

Parameter string representations are JSON-conform (see http://www.json.org/)
Examples:
 Numbers:
  42
  42.3333
  -42.23e+12
 Strings:
  "Any unicode character but some specials like \" \\ \/"
 bool:
  true
  false
 Objects:
  {"any string":{"any object":42,"another member":43}}


----------------------------------------------------------------

PARAMETER CONSTRUCTORS

The parameter vendor shall provide cci_base_param constructors as listed
in the file cci_base_param.h

For typed parameters a parameter vendor shall provide at least
the constructors listed in cci_param.h


----------------------------------------------------------------

ERROR/WARNING/INFO THROWING

The implementation shall throw sc_reports to report problems (warning/error)
or status (info). The id prefix should be (TODO:) "/OSCI/CCI/" followed by
one of the types defined in cci_error_types.h.


----------------------------------------------------------------
